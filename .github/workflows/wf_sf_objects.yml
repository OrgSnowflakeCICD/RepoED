name: wf_sf_objects

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:          
      - name: Retrieve Repository
        uses: actions/checkout@v3
      - name: Use Python 3.8.x
        uses: actions/setup-python@v4
        with:
          python-version: 3.8.x
      - name: Install SnowSQL
        run: |
          curl -O https://sfc-repo.snowflakecomputing.com/snowsql/bootstrap/1.3/linux_x86_64/snowsql-1.3.0-linux_x86_64.bash
          SNOWSQL_DEST=~/bin SNOWSQL_LOGIN_SHELL=~/.profile bash snowsql-1.3.0-linux_x86_64.bash
      - name: Check Exist Target Star Schema
        run: |
          if [[ "${{ github.event.repository.name }}" != "RepoED" ]] && [[ -z "${{ vars.TARGET_STAR_SCHEMA }}" ]]; then
            echo "Error: Repository is not 'RepoED, but we don't have repo variable TARGET_STAR_SCHEMA!"
            exit 1
          fi
      # - name: Get Unique Identifiers
      #   id: extract-unique-identifiers
      #   run: |
      #     if [[ -n $TARGET_STAR_SCHEMA ]]; then
      #       unique_identifiers=("CONFORMEDDIM" "$TARGET_STAR_SCHEMA")
      #     else
      #       identifiers=()
      #       # for file in $(find ${{ github.workspace }}/snowflake_objects -type f -name '*.sql'); do 
      #       for file in ${{ github.workspace }}/snowflake_objects/*.sql; do
      #         if [[ $file =~ ^.*_(.*)\.sql$ ]]; then
      #           identifiers+=("${BASH_REMATCH[1]}")
      #         fi
      #       done
      #       unique_identifiers=($(echo "${identifiers[@]}" | tr ' ' '\n' | sort -u ))
      #     fi
      #     echo "{unique_identifiers}=${unique_identifiers[@]}" >> $GITHUB_OUTPUT
      - name: Deploy
        env:
          SNOWSQL_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWSQL_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }} 
          SNOWSQL_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWSQL_USER: ${{ secrets.SNOWFLAKE_USERNAME }}
          SNOWSQL_PWD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWSQL_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          TARGET_STAR_SCHEMA: ${{ vars.TARGET_STAR_SCHEMA }}
        run: |
          # create master change history table if not exists
          ddl_master_change_history_query=$(cat "$GITHUB_WORKSPACE/snowflake_objects/change_history/ddl_master_change_history.sql" | sed "s/{TARGET_STAR_SCHEMA}/$TARGET_STAR_SCHEMA/g")
          echo "$ddl_master_change_history_query"
          ~/bin/snowsql -q "$ddl_master_change_history_query"        
          pip install schemachange==3.6.1
          
          if [[ -n $TARGET_STAR_SCHEMA ]]; then
            unique_identifiers=("CONFORMEDDIM" "$TARGET_STAR_SCHEMA")
          else
            identifiers=()
            # for file in $(find ${{ github.workspace }}/snowflake_objects -type f -name '*.sql'); do 
            for file in ${{ github.workspace }}/snowflake_objects/*.sql; do
              if [[ $file =~ ^.*_(.*)\.sql$ ]]; then
                identifiers+=("${BASH_REMATCH[1]}")
              fi
            done
            unique_identifiers=($(echo "${identifiers[@]}" | tr ' ' '\n' | sort -u))
          fi
          
          for identifier in "${unique_identifiers[@]}"; do
          # for identifier in "${steps.extract-unique-identifiers.outputs.unique_identifiers[@]}"; do
            echo "Execute identifier $identifier!"
            mkdir ${{ github.workspace }}/snowflake_objects/folder_tmp
            cp ${{ github.workspace }}/snowflake_objects/*_$identifier.sql ${{ github.workspace }}/snowflake_objects/folder_tmp
            ddl_project_change_history_query=$(cat "$GITHUB_WORKSPACE/snowflake_objects/change_history/ddl_project_change_history.sql" | sed "s/{TARGET_STAR_SCHEMA}/$identifier/g")
            echo "$ddl_project_change_history_query"
            ~/bin/snowsql -q "$ddl_project_change_history_query"          
            schemachange -f $GITHUB_WORKSPACE/snowflake_objects/folder_tmp -a $SNOWSQL_ACCOUNT -u $SNOWSQL_USER -r $SNOWSQL_ROLE -w $SNOWSQL_WAREHOUSE -d $SNOWSQL_DATABASE -c $SNOWSQL_DATABASE.SCHEMACHANGE.CHANGE_HISTORY_$identifier
            # finally drop project change history table
            dml_change_history_query=$(cat "$GITHUB_WORKSPACE/snowflake_objects/change_history/dml_change_history.sql" | sed "s/{TARGET_STAR_SCHEMA}/$identifier/g")
            echo "$dml_change_history_query"
            ~/bin/snowsql -q "$dml_change_history_query"
            rm -rf ${{ github.workspace }}/snowflake_objects/folder_tmp    
          done
